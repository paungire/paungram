package api

import (
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/golang-jwt/jwt/v5"
	"github.com/joho/godotenv"
	"golang.org/x/crypto/bcrypt"
)

var jwtSecret []byte

func init() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
	_ = godotenv.Load()

	secret := os.Getenv("JWT_SECRET")
	if secret == "" {
		log.Fatal("‚ùå JWT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
	}
	jwtSecret = []byte(secret)
}

func writeJSON(w http.ResponseWriter, status int, message string) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(map[string]string{
		"message": message,
	})
}

// üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
func (h *AuthHandler) Register(w http.ResponseWriter, r *http.Request) {
	var req RegisterRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		writeJSON(w, http.StatusBadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
		return
	}
	// –•—ç—à –ø–∞—Ä–æ–ª—è
	hash, _ := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	user := User{Email: req.Email, Password: string(hash)}
	if err := h.DB.Create(&user).Error; err != nil {
		writeJSON(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	writeJSON(w, http.StatusCreated, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
}

// üîπ –õ–æ–≥–∏–Ω
func (h *AuthHandler) Login(w http.ResponseWriter, r *http.Request) {
	var req LoginRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		writeJSON(w, http.StatusBadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
		return
	}

	var user User
	if err := h.DB.Where("email = ?", req.Email).First(&user).Error; err != nil {
		writeJSON(w, http.StatusUnauthorized, "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
	if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(req.Password)); err != nil {
		writeJSON(w, http.StatusUnauthorized, "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
		return
	}

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
	access, refresh, err := generateTokens(user.ID, h)
	if err != nil {
		writeJSON(w, http.StatusInternalServerError, err.Error())
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Å —Ç–æ–∫–µ–Ω–∞–º–∏
	http.SetCookie(w, &http.Cookie{
		Name:     "refresh_token",
		Value:    refresh, // plain token, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö—ç—à–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
		Expires:  time.Now().Add(7 * 24 * time.Hour),
		Path:     "/",                  // –º–æ–∂–Ω–æ '/' –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å
		HttpOnly: true,                 // –∫–ª—é—á–µ–≤–æ–π —Ñ–ª–∞–≥ ‚Äî JS –Ω–µ —É–≤–∏–¥–∏—Ç cookie
		SameSite: http.SameSiteLaxMode, // –∏–ª–∏ Strict
		// Secure:   false,                // –ª–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
	})
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(TokenResponse{
		AccessToken: access,
		UserID:      user.ID,
	})
}

func (h *AuthHandler) Refresh(w http.ResponseWriter, r *http.Request) {
	cookie, err := r.Cookie("refresh_token")
	if err != nil {
		http.Error(w, "Refresh token missing", http.StatusUnauthorized)
		return
	}

	UserID, err := ValidateRefreshToken(cookie.Value)
	if err != nil {
		http.Error(w, "Unauthorized: "+err.Error(), http.StatusUnauthorized)
		return
	}

	hash := hashToken(cookie.Value)

	var token RefreshToken
	if err := h.DB.Where("user_id = ? AND token_hash = ?", UserID, hash).First(&token).Error; err != nil {
		http.Error(w, "Invalid refresh token", http.StatusUnauthorized)
		return
	}

	// –ø—Ä–æ–≤–µ—Ä–∫–∞ exp
	if token.ExpiresAt.Before(time.Now()) {
		h.DB.Delete(&token)
		http.Error(w, "Refresh token expired", http.StatusUnauthorized)
		return
	}

	access, refresh, err := generateTokens(UserID, h)
	if err != nil {
		writeJSON(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞")
		return
	}

	http.SetCookie(w, &http.Cookie{
		Name:     "refresh_token",
		Value:    refresh, // plain token, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö—ç—à–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
		Expires:  time.Now().Add(7 * 24 * time.Hour),
		Path:     "/",  // –º–æ–∂–Ω–æ '/' –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å
		HttpOnly: true, // –∫–ª—é—á–µ–≤–æ–π —Ñ–ª–∞–≥ ‚Äî JS –Ω–µ —É–≤–∏–¥–∏—Ç cookie
		// Secure:   true,                    // —Ç—Ä–µ–±—É–µ—Ç HTTPS (true –≤ –ø—Ä–æ–¥–µ; –ª–æ–∫–∞–ª—å–Ω–æ mkcert)
		SameSite: http.SameSiteLaxMode, // –∑–∞—â–∏—Ç–∞ –æ—Ç CSRF (–≤–∞—Ä–∏–∞–Ω—Ç—ã: Lax/Strict/None)
	})

	json.NewEncoder(w).Encode(TokenResponse{
		AccessToken: access,
		UserID:      UserID,
	})
}

func ValidateRefreshToken(refreshString string) (uint, error) {
	// –ü–∞—Ä—Å–∏–º —Ç–æ–∫–µ–Ω
	token, err := jwt.Parse(refreshString, func(token *jwt.Token) (interface{}, error) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∏
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∏")
		}
		return jwtSecret, nil
	})
	if err != nil {
		return 0, err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º claims
	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok || !token.Valid {
		return 0, errors.New("–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –∂–∏–∑–Ω–∏
	if exp, ok := claims["exp"].(float64); ok {
		if time.Unix(int64(exp), 0).Before(time.Now()) {
			return 0, errors.New("—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫")
		}
	} else {
		return 0, errors.New("–Ω–µ—Ç exp –≤ —Ç–æ–∫–µ–Ω–µ")
	}

	// –ü–æ–ª—É—á–∞–µ–º user_id
	userIDFloat, ok := claims["user_id"].(float64)
	if !ok {
		return 0, errors.New("–Ω–µ—Ç user_id –≤ —Ç–æ–∫–µ–Ω–µ")
	}

	return uint(userIDFloat), nil
}

func ValidateAccessToken(r *http.Request) (uint, error) {
	authHeader := r.Header.Get("Authorization")
	if authHeader == "" {
		return 0, errors.New("–Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization")
	}

	parts := strings.Split(authHeader, " ")
	if len(parts) != 2 || parts[0] != "Bearer" {
		return 0, errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Authorization")
	}

	tokenStr := parts[1]

	// –ü–∞—Ä—Å–∏–º JWT
	token, err := jwt.Parse(tokenStr, func(token *jwt.Token) (interface{}, error) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∏
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∏")
		}
		return jwtSecret, nil
	})

	if err != nil {
		return 0, err
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok || !token.Valid {
		return 0, errors.New("–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –∂–∏–∑–Ω–∏
	if exp, ok := claims["exp"].(float64); ok {
		if time.Unix(int64(exp), 0).Before(time.Now()) {
			return 0, errors.New("—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫")
		}
	} else {
		return 0, errors.New("–Ω–µ—Ç exp –≤ —Ç–æ–∫–µ–Ω–µ")
	}

	// –ü–æ–ª—É—á–∞–µ–º user_id
	userIDFloat, ok := claims["user_id"].(float64)
	if !ok {
		return 0, errors.New("–Ω–µ—Ç user_id –≤ —Ç–æ–∫–µ–Ω–µ")
	}

	return uint(userIDFloat), nil
}

func ProtectedHandler(w http.ResponseWriter, r *http.Request) {
	userID, err := ValidateAccessToken(r)
	if err != nil {
		http.Error(w, "Unauthorized: "+err.Error(), http.StatusUnauthorized)
		return
	}

	// –í—Å—ë –æ–∫, userID –∏–∑–≤–µ—Å—Ç–µ–Ω, –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞—â–∏—â—ë–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
	w.Write([]byte(fmt.Sprintf("Hello user: %d. \n Is a secret information -_-\n - %d", userID, time.Now().Unix())))
}

// --- JWT –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ---
func hashToken(token string) string {
	h := sha256.New()
	h.Write([]byte(token))
	return hex.EncodeToString(h.Sum(nil))
}
func generateTokens(userID uint, h *AuthHandler) (string, string, error) {
	// Access (15 –º–∏–Ω)
	accessTokenClaims := jwt.MapClaims{
		"user_id": userID,
		"exp":     time.Now().Add(15 * time.Second).Unix(),
	}

	accessToken := jwt.NewWithClaims(jwt.SigningMethodHS256, accessTokenClaims)
	accessString, err := accessToken.SignedString(jwtSecret)
	if err != nil {
		return "", "", err
	}

	// Refresh (7 –¥–Ω–µ–π)
	refreshTokenClaims := jwt.MapClaims{
		"user_id": userID,
		"exp":     time.Now().Add(7 * 24 * time.Hour).Unix(),
	}

	refreshToken := jwt.NewWithClaims(jwt.SigningMethodHS256, refreshTokenClaims)
	refreshString, err := refreshToken.SignedString(jwtSecret)
	if err != nil {
		return "", "", err
	}

	hash := hashToken(refreshString)

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
	if err := h.DB.Where("user_id = ?", userID).Delete(&RefreshToken{}).Error; err != nil {
		return "", "", err
	}
	if err := h.DB.Create(&RefreshToken{
		UserID:    userID,
		TokenHash: string(hash),
		ExpiresAt: time.Now().Add(7 * 24 * time.Hour), // 7 –¥–Ω–µ–π
	}).Error; err != nil {
		return "", "", err
	}

	return accessString, refreshString, nil
}
